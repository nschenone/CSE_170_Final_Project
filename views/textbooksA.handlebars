<html>

<head>
	<title>Textbooks A</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<!-- Bootstrap -->
	<link href="/css/bootstrap.css" rel="stylesheet">
	<link href="/css/bootstrap-theme.css" rel="stylesheet">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css"
		integrity="sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd" crossorigin="anonymous">

	{{!-- <link href="css/style.css" rel="stylesheet"> --}}

	{{!-- CSS --}}
	<link href="/css/newStyle.css" rel="stylesheet">

	{{!-- Font Awesome --}}
	<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet"
		integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">

	{{!-- Google Fonts (Roboto) --}}
	<link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
	<meta name="className" content={{className}} />
	<meta name="classProfessor" content={{classProfessor}} />
	<meta name="classQuarter" content={{classQuarter}} />

	<script>
		var textbookPageType = "A";

		(function (i, s, o, g, r, a, m) {
			i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
				(i[r].q = i[r].q || []).push(arguments)
			}, i[r].l = 1 * new Date(); a = s.createElement(o),
				m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
		})(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

		ga('create', 'UA-158830494-2', 'auto');
		ga('send', 'pageview');
	</script>
</head>

<body>
	<div class="container">
		<header class="app-header">
			<div class="centered-outer">
				<div class="centered-inner-buttons header-text">
					<a
						href="/class/{{className}}/?description={{classDescription}}&professor={{classProfessor}}&quarter={{classQuarter}}">
						<i class="fa fa-arrow-left back-button"></i>
						{{!-- <button type=" submit" name="class-button" class="class-add-button">
						<img src="../images/plus.png" style="">
					</button> --}}
					</a>
					<div class="centered-inner info-text">
						<h3>Textbooks</h3>
						<h5>{{className}}</h5>
					</div>
					<div id="upload-button" class="file-upload">
						<label for="file-input">
							<i class="fa fa-upload textbook-a"></i>
						</label>
						<input id="file-input" type="file">
					</div>
					{{!-- <a href="#">
						<i class="fa fa-upload"></i>
					</a> --}}
				</div>

			</div>
		</header>
		<div class="content">
			{{!-- <input type="file" id="file-input-2"></input>

			<div class="upload-design-2-container">
				<input class="upload-design-2" type="submit" id="upload-button-2" value="Upload file"></input>

				<input class="upload-design-2" type="submit" id="list-contents-button" value="List Contents">
			</div> <br> --}}

			<div class="content-container"></div>

			{{!-- <form method="POST" action="/save-details">
			<input type="hidden" id="avatar-url" name="avatar-url" value="/images/default.png">
			<input type="submit" id="upload-button" value="Upload file">
		</form> --}}

			<script className={{className}}>

				/*
				  Function to carry out the actual PUT request to S3 using the signed request from the app.
				*/
				function uploadFile(file, signedRequest, url) {
					const xhr = new XMLHttpRequest();
					xhr.open('PUT', signedRequest);
					xhr.onreadystatechange = async () => {
						if (xhr.readyState === 4) {
							if (xhr.status === 200) {
							}
							else {
								alert('Could not upload file.');
							}
						}
					};
					xhr.send(file);
				}

				/*
				  Function to get the temporary signed request from the app.
				  If request successful, continue to upload the file using this signed
				  request.
				*/
				function getSignedRequest(file) {
					const xhr = new XMLHttpRequest();
					xhr.open('GET', `/sign-s3?file-name=${file.name}&file-type=${file.type}`);
					xhr.onreadystatechange = () => {
						if (xhr.readyState === 4) {
							if (xhr.status === 200) {
								const response = JSON.parse(xhr.responseText);
								// Design 1
								$.when(uploadFile(file, response.signedRequest, response.url)).then(listBucketContentsSlow());

								// Design 2
								//uploadFile(file, response.signedRequest, response.url);
							}
							else {
								alert('Could not get signed URL.');
							}
						}
					};
					xhr.send();
				}

				/*
				 Function called when file input updated. If there is a file selected, then
				 start upload procedure by asking for a signed request from the app.
				*/
				function initUpload() {
					const files = document.getElementById('file-input').files;

					const file = files[0];
					if (file == null) {
						return alert('No file selected.');
					} else {
						className = document.getElementsByName('className')[0].content;
						classProfessor = document.getElementsByName('classProfessor')[0].content;
						classQuarter = document.getElementsByName('classQuarter')[0].content;
						folderName = className + classProfessor + classQuarter + "/textbooks";
						var blob = file.slice(0, file.size, file.type);
						newFile = new File([blob], folderName + "/" + file.name, { type: file.type });
						getSignedRequest(newFile);
					}
				}

				/*
				 Function called when file input updated. If there is a file selected, then
				 start upload procedure by asking for a signed request from the app.
				*/
				function initUpload2() {
					const files = document.getElementById('file-input-2').files;

					const file = files[0];
					if (file == null) {
						return alert('No file selected.');
					} else {
						className = document.getElementsByName('className')[0].content;
						classProfessor = document.getElementsByName('classProfessor')[0].content;
						classQuarter = document.getElementsByName('classQuarter')[0].content;
						folderName = className + classProfessor + classQuarter + "/textbooks";
						var blob = file.slice(0, file.size, file.type);
						newFile = new File([blob], folderName + "/" + file.name, { type: file.type });
						getSignedRequest(newFile);
					}
				}

				function listBucketContents() {
					className = document.getElementsByName('className')[0].content;
					classProfessor = document.getElementsByName('classProfessor')[0].content;
					classQuarter = document.getElementsByName('classQuarter')[0].content;
					folderName = className + classProfessor + classQuarter + "/textbooks";
					const xhr = new XMLHttpRequest();
					xhr.open('GET', `/list-s3?bucket-prefix=${folderName}/`);
					xhr.onreadystatechange = () => {
						if (xhr.readyState === 4) {
							if (xhr.status === 200) {
								$(".content-container").html("");
								const response = JSON.parse(xhr.responseText);
								for (let item in response.Contents) {
									var link = "https://classresource.s3-us-west-1.amazonaws.com/" + response.Contents[item].Key.replace(/ /g, '+');
									var resource = response.Contents[item].Key.split(folderName + "/")[1]
									$(".content-container").append(`<a href=${link} target="_blank">
									<div class="card card-neutral mb-2">
										<div class="card-block">
											<div>` +
										resource +
										`</div>
										</div>
									</div></a>`);
								}
							}
							else {
								alert('Could not list bucket contents.');
							}
						}
					};
					xhr.send();
				}

				async function listBucketContentsSlow() {
					await sleep(2000);
					className = document.getElementsByName('className')[0].content;
					classProfessor = document.getElementsByName('classProfessor')[0].content;
					classQuarter = document.getElementsByName('classQuarter')[0].content;
					folderName = className + classProfessor + classQuarter + "/textbooks";
					const xhr = new XMLHttpRequest();
					xhr.open('GET', `/list-s3?bucket-prefix=${folderName}/`);
					xhr.onreadystatechange = () => {
						if (xhr.readyState === 4) {
							if (xhr.status === 200) {
								$(".content-container").html("");
								const response = JSON.parse(xhr.responseText);
								for (let item in response.Contents) {
									var link = "https://classresource.s3-us-west-1.amazonaws.com/" + response.Contents[item].Key.replace(/ /g, '+');
									var resource = response.Contents[item].Key.split(folderName + "/")[1]
									$(".content-container").append(`<a href=${link} target="_blank">
									<div class="card card-neutral mb-2">
										<div class="card-block">
											<div>` +
										resource +
										`</div>
										</div>
									</div></a>`);
								}
							}
							else {
								alert('Could not list bucket contents.');
							}
						}
					};
					xhr.send();
				}

				function sleep(ms) {
					return new Promise(resolve => setTimeout(resolve, ms));
				}
				/*
				 Bind listeners when the page loads.
				*/

				(() => {
					// Design 1
					document.getElementById('upload-button').onchange = initUpload;
					listBucketContents();

					// Design 2
					//document.getElementById('upload-button-2').onclick = initUpload2;
					//document.getElementById('list-contents-button').onclick = listBucketContents;
					//listBucketContents();
				})();

			</script>
		</div>

		<footer class="app-footer">
			<ul>
				<a href="/search">
					<li>
						<i class="fa fa-search"></i>
						{{!-- <p>Search Classes</p> --}}
						<p>Search</p>
					</li>
				</a>
				<a href="/myClasses">
					<li>
						<i class="fa fa-book"></i>
						{{!-- <p>My Classes</p> --}}
						<p>My Classes</p>
					</li>
				</a>
				<a href="/profile">
					<li>
						<i class="fa fa-user"></i>
						{{!-- <p>My Profile</p> --}}
						<p>Profile</p>
					</li>
				</a>
			</ul>
		</footer>
	</div>

	<script src="/js/jquery-1.11.0.js"></script>
	<script src="/js/bootstrap.js"></script>
	<script src="/js/ga.js"></script>
</body>

</html>